// <auto-generated />
using System;
using Marimon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Marimon.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Marimon.Models.Autoparte", b =>
                {
                    b.Property<int>("aut_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("aut_id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<int>("aut_cantidad")
                        .HasColumnType("integer");

                    b.Property<string>("aut_descripcion")
                        .HasColumnType("text");

                    b.Property<string>("aut_especificacion")
                        .HasColumnType("text");

                    b.Property<string>("aut_imagen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("aut_nombre")
                        .HasColumnType("text");

                    b.Property<decimal>("aut_precio")
                        .HasColumnType("numeric");

                    b.HasKey("aut_id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Autoparte");
                });

            modelBuilder.Entity("Marimon.Models.Boleta", b =>
                {
                    b.Property<int>("bol_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("bol_id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("bol_id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Boleta");
                });

            modelBuilder.Entity("Marimon.Models.Categoria", b =>
                {
                    b.Property<int>("cat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("cat_id"));

                    b.Property<string>("cat_nombre")
                        .HasColumnType("text");

                    b.HasKey("cat_id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Marimon.Models.Comprobante", b =>
                {
                    b.Property<int>("com_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("com_id"));

                    b.Property<int?>("BoletaId")
                        .HasColumnType("integer");

                    b.Property<int?>("FacturaId")
                        .HasColumnType("integer");

                    b.Property<int>("VentaId")
                        .HasColumnType("integer");

                    b.Property<string>("com_nombre")
                        .HasColumnType("text");

                    b.HasKey("com_id");

                    b.HasIndex("BoletaId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("VentaId");

                    b.ToTable("Comprobante");
                });

            modelBuilder.Entity("Marimon.Models.DetalleVentas", b =>
                {
                    b.Property<int>("det_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("det_id"));

                    b.Property<int>("AutoParteId")
                        .HasColumnType("integer");

                    b.Property<int>("VentaId")
                        .HasColumnType("integer");

                    b.Property<string>("det_cantidad")
                        .HasColumnType("text");

                    b.HasKey("det_id");

                    b.HasIndex("AutoParteId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("Marimon.Models.Entradas", b =>
                {
                    b.Property<int>("ent_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ent_id"));

                    b.Property<int>("AutoparteId")
                        .HasColumnType("integer");

                    b.Property<int>("aut_cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("aut_precio")
                        .HasColumnType("numeric");

                    b.Property<int>("ent_cantidad")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ent_fechaent")
                        .HasColumnType("date");

                    b.Property<string>("ent_proveedor")
                        .HasColumnType("text");

                    b.HasKey("ent_id");

                    b.HasIndex("AutoparteId");

                    b.ToTable("Entradas");
                });

            modelBuilder.Entity("Marimon.Models.Factura", b =>
                {
                    b.Property<int>("fac_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("fac_id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("fac_direccion")
                        .HasColumnType("text");

                    b.Property<string>("fac_razonsocial")
                        .HasColumnType("text");

                    b.Property<string>("fac_ruc")
                        .HasColumnType("text");

                    b.HasKey("fac_id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("Marimon.Models.MetodoPago", b =>
                {
                    b.Property<int>("pag_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("pag_id"));

                    b.Property<DateOnly>("pag_fecha")
                        .HasColumnType("date");

                    b.Property<string>("pag_importe")
                        .HasColumnType("text");

                    b.Property<string>("pag_metodo")
                        .HasColumnType("text");

                    b.HasKey("pag_id");

                    b.ToTable("MetodoPago");
                });

            modelBuilder.Entity("Marimon.Models.Salida", b =>
                {
                    b.Property<int>("sal_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("sal_id"));

                    b.Property<int>("ComprobanteId")
                        .HasColumnType("integer");

                    b.Property<int>("aut_cantidad")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("sal_fechasalida")
                        .HasColumnType("date");

                    b.HasKey("sal_id");

                    b.HasIndex("ComprobanteId");

                    b.ToTable("Salida");
                });

            modelBuilder.Entity("Marimon.Models.Usuario", b =>
                {
                    b.Property<int>("usu_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("usu_id"));

                    b.Property<string>("usu_apellido")
                        .HasColumnType("text");

                    b.Property<string>("usu_contrasena")
                        .HasColumnType("text");

                    b.Property<string>("usu_correo")
                        .HasColumnType("text");

                    b.Property<string>("usu_nombre")
                        .HasColumnType("text");

                    b.Property<string>("usu_num_identificacion")
                        .HasColumnType("text");

                    b.HasKey("usu_id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Marimon.Models.Venta", b =>
                {
                    b.Property<int>("ven_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ven_id"));

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ven_fecha")
                        .HasColumnType("date");

                    b.HasKey("ven_id");

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Marimon.Models.Autoparte", b =>
                {
                    b.HasOne("Marimon.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Marimon.Models.Boleta", b =>
                {
                    b.HasOne("Marimon.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Marimon.Models.Comprobante", b =>
                {
                    b.HasOne("Marimon.Models.Boleta", "Boleta")
                        .WithMany()
                        .HasForeignKey("BoletaId");

                    b.HasOne("Marimon.Models.Factura", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId");

                    b.HasOne("Marimon.Models.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boleta");

                    b.Navigation("Factura");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Marimon.Models.DetalleVentas", b =>
                {
                    b.HasOne("Marimon.Models.Autoparte", "Autoparte")
                        .WithMany()
                        .HasForeignKey("AutoParteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marimon.Models.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autoparte");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Marimon.Models.Entradas", b =>
                {
                    b.HasOne("Marimon.Models.Autoparte", "Autoparte")
                        .WithMany()
                        .HasForeignKey("AutoparteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autoparte");
                });

            modelBuilder.Entity("Marimon.Models.Factura", b =>
                {
                    b.HasOne("Marimon.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Marimon.Models.Salida", b =>
                {
                    b.HasOne("Marimon.Models.Comprobante", "Comprobante")
                        .WithMany()
                        .HasForeignKey("ComprobanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprobante");
                });

            modelBuilder.Entity("Marimon.Models.Venta", b =>
                {
                    b.HasOne("Marimon.Models.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
