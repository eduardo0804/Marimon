@model Marimon.Models.CatalogoViewModel

@{
    ViewData["Title"] = "Catálogo";
}

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="~/css/catalogo.css" asp-append-version="true" />
<style>
    .autocomplete-container {
        position: absolute;
        z-index: 1000;
        background: white;
        width: 100%;
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-top: none;
        display: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .autocomplete-item {
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f3f3f3;
    }

    .autocomplete-item:hover {
        background-color: #f8f9fa;
    }

    .search-container {
        position: relative;
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
    }
</style>

<div class="container catalogo-container">
    <div class="row mb-4 align-items-center">
        <!-- Columna para centrar el título -->
        <div class="col-12 text-center mb-2">
            <h2>Catálogo de Autopartes</h2>
        </div>

        <!-- Columna para alinear el dropdown a la derecha -->
        @* NO BORRAR *@
        @* <div class="col-12 text-end"> *@
        @*     <div class="dropdown"> *@
        @*         <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="historialBusqueda" data-bs-toggle="dropdown" aria-expanded="false"> *@
        @*             Búsquedas recientes *@
        @*         </button> *@
        @*         <ul class="dropdown-menu" id="historial-busquedas" aria-labelledby="historialBusqueda"> *@
        @*             <li><a class="dropdown-item text-center" href="#">No hay búsquedas recientes</a></li> *@
        @*         </ul> *@
        @*     </div> *@
        @* </div> *@
    </div>


    <!-- Buscador -->
    <!-- Reemplazar el buscador actual con este -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="search-container">
                <form asp-controller="Catalogo" asp-action="Index" method="get" class="d-flex justify-content-center">
                    <div class="input-group search-with-icon">
                        <input type="text" name="buscar" id="autocomplete-search" class="form-control"
                            placeholder="¿Qué repuesto estás buscando hoy?" autocomplete="off">
                        <button class="btn btn-dark" type="submit">Buscar</button>
                    </div>
                </form>
                <div id="autocomplete-results" class="autocomplete-container"></div>
            </div>
        </div>
    </div>
    @if (ViewBag.Mensaje != null)
    {
        <div class="d-flex flex-column align-items-center justify-content-center mb-4">
            <div class="text-center">
                <h4 class="text-muted">@ViewBag.Mensaje</h4>
            </div>
            <div class="mt-3">
                <img src="https://cdn-icons-png.flaticon.com/512/5622/5622660.png" alt="No se encontraron productos"
                    width="80" height="80" class="img-fluid" />
            </div>
        </div>

    }

    <!-- Productos -->
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="row justify-content-center">
                @foreach (var autoparte in Model.Autopartes)
                {
                    <div class="col-md-4 col-sm-6 mb-4">
                        <div class="card producto-card h-100 shadow-sm">
                            <div class="p-3 text-center">
                                <img src="@autoparte.aut_imagen" alt="@autoparte.aut_nombre" class="producto-imagen"
                                    style="cursor:pointer;" onclick="cargarDetalleAutoparte(@autoparte.aut_id)" />
                            </div>
                            <div class="card-body text-center">
                                <h5 class="card-title">@autoparte.aut_nombre</h5>
                                <p class="card-text precio">Precio:
                                    <strong>S/@autoparte.aut_precio.ToString("0.00")</strong>
                                </p>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    @if (autoparte.aut_cantidad > 0)
                                    {
                                        <form asp-controller="Carrito" asp-action="AñadirAlCarrito" method="post"
                                            onsubmit="mostrarToast()">
                                            <input type="hidden" name="autoparteId" value="@autoparte.aut_id" />
                                            <input type="hidden" name="cantidad" value="1" min="1" class="form-control" />
                                            <button class="btn btn-dark btn-search" type="submit">Añadir al Carrito</button>
                                        </form>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary" disabled>Agotado</button>
                                    }
                                }
                                else
                                {
                                    <div class="alert alert-warning">
                                        Debes <a href="/Identity/Account/Login">iniciar sesión</a> para añadir productos a la
                                        cesta.
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>
<!-- Botones de Navegación -->
<div class="row mt-4 mb-4">
    <div class="col-12 d-flex justify-content-center">
        <nav aria-label="Navegación de páginas">
            <ul class="pagination">
                <li class="page-item @(Model.PaginaActual > 1 ? "" : "disabled")">
                    <a class="page-link"
                        href="@Url.Action("Index", "Catalogo", new { pagina = Model.PaginaActual > 1 ? Model.PaginaActual - 1 : 1, buscar = Model.Buscar })"
                        aria-label="Anterior">
                        <span aria-hidden="true">&laquo; Anterior</span>
                        <span class="sr-only">Anterior</span>
                    </a>
                </li>

                @* @for (var i = 1; i <= Model.TotalPaginas; i++)
                {
                    <li class="page-item @(i == Model.PaginaActual ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index", "Catalogo", new { pagina = i, buscar = Model.Buscar })">
                            @i
                        </a>
                    </li>
                } *@

                <li class="page-item @(Model.PaginaActual < Model.TotalPaginas ? "" : "disabled")">
                    <a class="page-link"
                        href="@Url.Action("Index", "Catalogo", new { pagina = Model.PaginaActual < Model.TotalPaginas ? Model.PaginaActual + 1 : Model.PaginaActual, buscar = Model.Buscar })"
                        aria-label="Siguiente">
                        <span aria-hidden="true">&raquo; Siguiente</span>
                        <span class="sr-only">Siguiente</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Alerta Carrito-->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100">
    <div id="toastCarrito" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-check-circle me-2"></i>
                <span id="toastMessage">La autoparte fue agregada al Carrito.</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Cerrar"></button>
        </div>
    </div>
</div>

<!-- Alerta Favorito-->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100">
    <div id="toastFavorito" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-check-circle me-2"></i>
                <span id="toastMessage">La autoparte fue agregada correctamente a tus favoritos.</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Cerrar"></button>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="modalAutoparte" class="modal">
    <div id="contenidoModal">
        <button class="cerrar-modal" onclick="cerrarModal()">×</button>
        <!-- Aquí se carga el contenido desde el controlador -->
    </div>
</div>

<script>
    // Unificar todos los eventos DOMContentLoaded en uno solo
    document.addEventListener('DOMContentLoaded', function () {
        // === Código del autocompletado ===
        const searchInput = document.getElementById('autocomplete-search');
        const resultsContainer = document.getElementById('autocomplete-results');
        let timeoutId;

        searchInput.addEventListener('input', function () {
            clearTimeout(timeoutId);
            const query = this.value.trim();

            if (query.length < 2) {
                resultsContainer.innerHTML = '';
                resultsContainer.style.display = 'none';
                return;
            }

            timeoutId = setTimeout(() => {
                fetch(`/Catalogo/Autocomplete?query=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        resultsContainer.innerHTML = '';

                        if (data.length === 0) {
                            resultsContainer.style.display = 'none';
                            return;
                        }

                        data.forEach(item => {
                            const div = document.createElement('div');
                            div.className = 'autocomplete-item';
                            div.textContent = item.nombre;
                            div.addEventListener('click', () => {
                                searchInput.value = item.nombre;
                                resultsContainer.style.display = 'none';

                                // Guardar en historial cuando se selecciona
                                guardarEnHistorial(item.nombre);

                                // Opcional: enviar formulario automáticamente
                                searchInput.closest('form').submit();
                            });
                            resultsContainer.appendChild(div);
                        });

                        resultsContainer.style.display = 'block';
                    });
            }, 300);
        });

        // Ocultar resultados al hacer clic fuera
        document.addEventListener('click', function (e) {
            if (e.target !== searchInput && e.target !== resultsContainer) {
                resultsContainer.style.display = 'none';
            }
        });

        // === Código del historial de búsquedas ===
        // Obtener historial almacenado o inicializar vacío
        let historialBusquedas = JSON.parse(localStorage.getItem('historialBusquedas')) || [];
        actualizarHistorialUI();

        // Función para guardar en historial (para reutilizar)
        function guardarEnHistorial(searchTerm) {
            if (searchTerm) {
                console.log("Guardando búsqueda:", searchTerm); // Depuración

                // Evitar duplicados
                historialBusquedas = historialBusquedas.filter(item => item !== searchTerm);

                // Añadir al principio
                historialBusquedas.unshift(searchTerm);

                // Mantener solo las 10 búsquedas más recientes
                if (historialBusquedas.length > 10) {
                    historialBusquedas.pop();
                }

                // Guardar en localStorage
                localStorage.setItem('historialBusquedas', JSON.stringify(historialBusquedas));

                // Actualizar la UI inmediatamente
                actualizarHistorialUI();
            }
        }

        // Cuando se envía el formulario de búsqueda, guardar la búsqueda
        document.querySelector('form[asp-controller="Catalogo"]').addEventListener('submit', function (e) {
            const searchTerm = document.getElementById('autocomplete-search').value.trim();
            guardarEnHistorial(searchTerm);
        });

        // Función para actualizar la UI del historial
        function actualizarHistorialUI() {
            const historialElement = document.getElementById('historial-busquedas');

            if (!historialBusquedas || historialBusquedas.length === 0) {
                historialElement.innerHTML = '<li><a class="dropdown-item text-center" href="#">No hay búsquedas recientes</a></li>';
                return;
            }

            historialElement.innerHTML = '';
            historialBusquedas.forEach(termino => {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.classList.add('dropdown-item');
                a.href = '/Catalogo/Index?buscar=' + encodeURIComponent(termino);
                a.textContent = termino;

                li.appendChild(a);
                historialElement.appendChild(li);
            });

            // Añadir opción para limpiar historial
            if (historialBusquedas.length > 0) {
                const separador = document.createElement('li');
                separador.innerHTML = '<hr class="dropdown-divider">';
                historialElement.appendChild(separador);

                const limpiarLi = document.createElement('li');
                const limpiarA = document.createElement('a');
                limpiarA.classList.add('dropdown-item', 'text-danger');
                limpiarA.href = '#';
                limpiarA.textContent = 'Limpiar historial';
                limpiarA.addEventListener('click', function (e) {
                    e.preventDefault();
                    localStorage.removeItem('historialBusquedas');
                    historialBusquedas = [];
                    actualizarHistorialUI();
                });

                limpiarLi.appendChild(limpiarA);
                historialElement.appendChild(limpiarLi);
            }
        }
    });
    function cargarDetalleAutoparte(id) {
        fetch(`/Catalogo/DetalleAutoparte/${id}`)
            .then(response => response.text())
            .then(html => {
                document.getElementById("contenidoModal").innerHTML = '<button class="cerrar-modal" onclick="cerrarModal()">×</button>' + html;
                document.getElementById("modalAutoparte").style.display = "block";
                const zoomModal = document.getElementById("zoomModal");
                if (zoomModal) zoomModal.style.display = "none";
                inicializarZoom();
            });
    }
    document.getElementById("zoomModal").style.display = "flex";
    document.getElementById("zoomModal").style.display = "none";

    function abrirZoomModal(imagenSrc) {
        const zoomModal = document.getElementById("zoomModal");
        const zoomedImage = document.getElementById("zoomedImage");
        if (!zoomModal || !zoomedImage) return;

        zoomModal.style.display = "flex";
        zoomedImage.src = imagenSrc;
        zoomedImage.style.transform = "scale(1)";
        let zoomActivo = false;

        zoomedImage.onmousemove = null;
        zoomedImage.onmousedown = null;
        zoomedImage.onmouseleave = null;

        zoomedImage.onmousemove = function (e) {
            if (!zoomActivo) return;
            const rect = zoomedImage.getBoundingClientRect();
            const x = ((e.clientX - rect.left) / rect.width) * 100;
            const y = ((e.clientY - rect.top) / rect.height) * 100;
            zoomedImage.style.transformOrigin = `${x}% ${y}%`;
        };

        zoomedImage.onmousedown = function () {
            if (!zoomActivo) {
                zoomedImage.style.transform = "scale(2)";
                zoomActivo = true;
            } else {
                zoomedImage.style.transform = "scale(1)";
                zoomActivo = false;
            }
        };

        zoomedImage.onmouseleave = function () {
            zoomedImage.style.transform = "scale(1)";
            zoomActivo = false;
        };
    }

    function cerrarModal() {
        document.getElementById("modalAutoparte").style.display = "none";
        const zoomModal = document.getElementById("zoomModal");
        if (zoomModal) zoomModal.style.display = "none";
    }

    function mostrarToast() {
        var toast = new bootstrap.Toast(document.getElementById("toastCarrito"));
        toast.show();
    }

    function agregarFavorito(icon) {
        if (icon.classList.contains('fa-regular')) {
            icon.classList.remove('fa-regular');
            icon.classList.add('fa-solid');
        } else {
            icon.classList.remove('fa-solid');
            icon.classList.add('fa-regular');
        }
        var toast = new bootstrap.Toast(document.getElementById("toastFavorito"));
        toast.show();
    }

    function cerrarZoom() {
        const zoomModal = document.getElementById("zoomModal");
        const zoomedImage = document.getElementById("zoomedImage");
        if (zoomModal && zoomedImage) {
            zoomModal.style.display = "none";
            zoomedImage.style.transform = "scale(1)";
        }
    }
</script>
